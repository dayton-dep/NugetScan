using Newtonsoft.Json;
using System.Diagnostics;

class Program
{
    static void Main(string[] args)
    {
        bool useDotNet = args.Contains("--useDotNet");

        RunRestore(useDotNet, args[0]);

        string nugetIgnorePath = Path.Combine(Environment.GetEnvironmentVariable("System.DefaultWorkingDirectory"), "nugetignore.json");
        string restoreOutputPath = Path.Combine(Environment.GetEnvironmentVariable("Build.SourcesDirectory"), "restore_output.txt");

        string jsonContent = File.ReadAllText(nugetIgnorePath);
        dynamic ignoredUrls = JsonConvert.DeserializeObject(jsonContent);
        dynamic vulnerabilities = ignoredUrls.vulnerabilities;
        List<string> restoreWarnings = File.ReadAllLines(restoreOutputPath)
                                        .Where(line => line.Contains("warning"))
                                        .ToList();
        List<string> validatedWarnings = new List<string>();
        foreach (string warning in restoreWarnings)
        {
            bool isValidated = false;
            foreach (dynamic vuln in vulnerabilities)
            {
                if (warning.Contains(vuln.url.ToString()))
                {
                    if (vuln.expiry != null)
                    {
                        DateTime expiryDate = DateTime.ParseExact(vuln.expiry.ToString(), "yyyy-MM-dd", null);
                        DateTime currentDate = DateTime.Now;
                        if (currentDate < expiryDate)
                        {
                            isValidated = true;
                            break;
                        }
                        isValidated = false;
                    }
                    else
                    {
                        isValidated = true;
                    }
                }
            }
            if (isValidated)
            {
                validatedWarnings.Add(warning);
            }
        }

        if (validatedWarnings.Any())
        {
            Console.WriteLine("Vulnerability Warnings Found:");
            foreach (string warning in validatedWarnings)
            {
                Console.WriteLine(warning);
            }
            Environment.Exit(1);
        }
        else
        {
            Console.WriteLine("No Vulnerabilities found");
            Environment.Exit(0);
        }

        static void RunRestore(bool isDotNet, string solution)
        {
            var outputStream = new StreamWriter($"{Path.Combine(Directory.GetCurrentDirectory(), "./restore_output.txt")}");
                ProcessStartInfo startInfo = new ProcessStartInfo{ FileName= (isDotNet) ? "dotnet": "nuget", Arguments=$"restore \"{solution}\"" };
                startInfo.RedirectStandardOutput = true;
                startInfo.UseShellExecute = false;

                Process cmdProcess = new Process {StartInfo = startInfo};
                cmdProcess.OutputDataReceived += new DataReceivedEventHandler((sender, e) =>
                {
                    if (!String.IsNullOrEmpty(e.Data))
                    {
                        outputStream.WriteLine(e.Data);
                    }
                });

                cmdProcess.Start();
                cmdProcess.BeginOutputReadLine();
                cmdProcess.WaitForExit();
                outputStream.Close();
        }
    }
}

